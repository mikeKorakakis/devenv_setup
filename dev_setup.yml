---
- name: Setup Development Environment
  hosts: localhost
  become: yes
  connection: local
  vars:
    ansible_user: "{{ lookup('env', 'USER') }}"  # Dynamically set the user
    NODEJS_VERSION: "20"
  tasks:

    # - name: Show Ansible User
    #   debug:
    #     msg: "The current user is {{ ansible_user }}"

    - name: Ensure /etc/wsl.conf exists
      file:
        path: /etc/wsl.conf
        state: touch

    - name: Configure WSL to use a specific hostname and enable systemd
      blockinfile:
        path: /etc/wsl.conf
        block: |
          [network]
          hostname = "{{ lookup('env', 'USER') }}"

          [boot]
          systemd = true

    - name: Restart WSL to apply changes
      shell: |
        wsl --shutdown
      ignore_errors: yes

    - name: Update /etc/hostname
      lineinfile:
        path: /etc/hostname
        line: "{{ ansible_user }}"
        create: yes

    - name: Update /etc/hosts to include new hostname
      lineinfile:
        path: /etc/hosts
        regexp: '^127\\.0\\.1\\.1\\s+'
        line: "127.0.1.1 {{ ansible_user }}"
        create: yes
        state: present
        insertafter: EOF

    - name: Update /etc/hosts to include localhost entry for new hostname
      lineinfile:
        path: /etc/hosts
        regexp: '^127\\.0\\.0\\.1\\s+'
        line: "127.0.0.1 localhost {{ ansible_user }}"
        create: yes
        state: present
        insertafter: BOF

    - name: Set the hostname for the current session
      shell: hostname {{ ansible_user }}

    - name: Update and upgrade apt packages
      apt:
        update_cache: yes
        upgrade: dist

    - name: Install essential packages
      apt:
        name:
          - build-essential
          - git
          - curl
          - wget
          - zsh
          - software-properties-common
        state: present

    - name: Install the gpg key for nodejs LTS
      apt_key:
        url: "https://deb.nodesource.com/gpgkey/nodesource.gpg.key"
        state: present
    
    - name: Install the nodejs LTS repos
      apt_repository:
        repo: "deb https://deb.nodesource.com/node_{{ NODEJS_VERSION }}.x {{ ansible_distribution_release }} main"
        state: present
        update_cache: yes

    - name: Install the nodejs
      apt:
        name: nodejs
        state: present

    - name: Install Neovim
      apt:
        name: neovim
        state: present

    - name: Install Go (Golang)
      apt:
        name: golang-go
        state: present

    - name: Install .NET SDK
      shell: |
        wget https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
        sudo dpkg -i packages-microsoft-prod.deb
        sudo apt-get update
        sudo apt-get install -y dotnet-sdk-8.0

    - name: Download Stripe CLI tar.gz
      get_url:
        url: https://github.com/stripe/stripe-cli/releases/download/v1.7.9/stripe_1.7.9_linux_x86_64.tar.gz
        dest: /tmp/stripe.tar.gz

    - name: Extract Stripe CLI tar.gz
      unarchive:
        src: /tmp/stripe.tar.gz
        dest: /tmp/
        remote_src: yes

    - name: Move Stripe CLI to /usr/local/bin
      command: mv /tmp/stripe /usr/local/bin/stripe

    - name: Ensure Stripe CLI is executable
      file:
        path: /usr/local/bin/stripe
        mode: '0755'

    - name: Create .ssh directory if it does not exist
      file:
        path: "/home/{{ ansible_user }}/.ssh"
        state: directory
        mode: '0700'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

    - name: Generate SSH key if it does not exist
      become_user: "{{ ansible_user }}"
      command: ssh-keygen -t rsa -b 4096 -f "/home/{{ ansible_user }}/.ssh/id_rsa" -q -N ""
      args:
        creates: "/home/{{ ansible_user }}/.ssh/id_rsa"

    - name: Ensure SSH directory has correct permissions
      file:
        path: "/home/{{ ansible_user }}/.ssh"
        state: directory
        mode: '0700'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

    - name: Ensure SSH key has correct permissions
      file:
        path: "/home/{{ ansible_user }}/.ssh/id_rsa"
        state: file
        mode: '0600'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

    - name: Ensure SSH public key has correct permissions
      file:
        path: "/home/{{ ansible_user }}/.ssh/id_rsa.pub"
        state: file
        mode: '0644'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

    - name: Display SSH public key
      command: cat "/home/{{ ansible_user }}/.ssh/id_rsa.pub"
      register: ssh_public_key

    - name: Show SSH public key
      debug:
        msg: "{{ ssh_public_key.stdout }}"

    - name: Configure Git user name
      become_user: "{{ ansible_user }}"
      git_config:
        name: user.name
        value: "Mike Korakakis"
        scope: global

    - name: Configure Git user email
      become_user: "{{ ansible_user }}"
      git_config:
        name: user.email
        value: "mike.korakakis@gmail.com"
        scope: global

    - name: Install Oh My Zsh
      become: yes
      become_user: "{{ ansible_user }}"
      shell: >
        sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
      args:
        creates: "/home/{{ ansible_user }}/.oh-my-zsh"

    - name: Change default shell to Zsh
      user:
        name: "{{ ansible_user }}"
        shell: /usr/bin/zsh
   
 
    - name: Install dependencies
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg-agent
          - software-properties-common
        state: latest
        update_cache: yes

    - name: Remove existing Docker repository files
      shell: |
        rm -f /etc/apt/sources.list.d/docker.list
        rm -f /etc/apt/sources.list.d/docker-ce.list
        rm -f /etc/apt/keyrings/docker.asc
        rm -f /etc/apt/keyrings/docker.gpg
        rm -f sources.list.d/docker.list.list 
        rm -f sources.list.d/download_docker_com_linux_ubuntu.list
        sed -i '/download.docker.com/d' /etc/apt/sources.list
      ignore_errors: yes

    - name: Remove existing Docker keys
      shell: |
        apt-key del 9DC858229FC7DD38854AE2D88D81803C0EBFCD88 || true
        apt-key del 0EBFCD88 || true
      ignore_errors: yes

    - name: Ensure Docker GPG key directory exists
      file:
        path: /etc/apt/keyrings
        state: directory

    - name: Add Docker GPG key
      shell: |
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg

    - name: Add Docker repository
      shell: |
        echo "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install Docker
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: latest

    - name: Add user to Docker group
      user:
        name: "{{ lookup('env', 'USER') }}"
        groups: docker
        append: yes

    - name: Get latest Docker Compose release info
      uri:
        url: https://api.github.com/repos/docker/compose/releases/latest
        return_content: yes
      register: latest_compose_release

    - name: Get latest Docker Compose release info
      uri:
        url: https://api.github.com/repos/docker/compose/releases/latest
        return_content: yes
      register: latest_compose_release
      failed_when: latest_compose_release.status != 200

    - name: Debug latest Docker Compose release info
      debug:
        var: latest_compose_release.json

    - name: Set Docker Compose download URL
      set_fact:
        docker_compose_url: "{{ latest_compose_release.json.assets | selectattr('name', 'search', 'docker-compose-linux-x86_64$') | map(attribute='browser_download_url') | first }}"
      when: latest_compose_release.json.assets | selectattr('name', 'search', 'docker-compose-linux-x86_64$') | list | length > 0

    - name: Fallback Docker Compose download URL
      set_fact:
        docker_compose_url: "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-Linux-x86_64"
      when: docker_compose_url is not defined

    - name: Debug Docker Compose download URL
      debug:
        msg: "Docker Compose will be downloaded from {{ docker_compose_url }}"

    - name: Install Docker Compose
      get_url:
        url: "{{ docker_compose_url }}"
        dest: /usr/local/bin/docker-compose
        mode: '0755'

    - name: Verify Docker Compose installation
      command: docker-compose --version
      register: docker_compose_version

    - name: Show Docker Compose version
      debug:
        msg: "{{ docker_compose_version.stdout }}"
